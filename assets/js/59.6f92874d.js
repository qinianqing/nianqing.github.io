(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{875:function(n,t,e){"use strict";e.r(t);var a=e(41),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"为何要用python"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为何要用python"}},[n._v("#")]),n._v(" 为何要用Python?")]),n._v(" "),e("p",[n._v("最近公司大屏项目，之前用的node.js，数据量大了之后，还是有瓶颈的，并且js太灵活，没有好的代码风格控制，当然，还有其他的原因哈，就不一一介绍python了，去官网看就好。")]),n._v(" "),e("h3",{attrs:{id:"让我们开始吧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#让我们开始吧"}},[n._v("#")]),n._v(" 让我们开始吧!")]),n._v(" "),e("h4",{attrs:{id:"下载python"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载python"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("下载python"),e("OutboundLink")],1)]),n._v(" "),e("h4",{attrs:{id:"python基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#python基础"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://www.runoob.com/python3/python3-interpreter.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("python基础"),e("OutboundLink")],1)]),n._v(" "),e("h4",{attrs:{id:"django-rest-framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#django-rest-framework"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://www.django-rest-framework.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Django Rest framework"),e("OutboundLink")],1)]),n._v(" "),e("ol",[e("li",[e("h4",{attrs:{id:"安装所需要的包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装所需要的包"}},[n._v("#")]),n._v(" 安装所需要的包")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("pip3  install django\npip3 install djangorestframework\n\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[e("h4",{attrs:{id:"用-djiango创建项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用-djiango创建项目"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://docs.djangoproject.com/en/3.0/",target:"_blank",rel:"noopener noreferrer"}},[n._v("用 Djiango创建项目"),e("OutboundLink")],1)])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("django-admin startproject djangoDemo\n\x3c!-- 目录结构 --\x3e\ndjangoDemo/\n├── djangoDemo  //项目最初的Python包\n│   ├── __init__.py  //一个空文件，声明所在目录的包为一个Python包\n│   ├── settings.py // 管理项目的配置信息\n│   ├── urls.py //声明请求url的映射关系\n│   └── wsgi.py //python程序和web服务器的通信协议\n└── manage.py // 一个命令行工具，用来和Django项目进行交互，如前面创建项目就用到了该文件\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("h4",{attrs:{id:"讲下-settings-py"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#讲下-settings-py"}},[n._v("#")]),n._v(" 讲下 settings.py")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import os\n\n# 项目的相对路径，启动服务的时候会运行这个文件所在路径的manage.py\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# 安全密钥\nSECRET_KEY = 'l&!v_npes(!j82+x(44vt+h&#ag7io2x&shnf*9^8fv0d63!0r'\n\n# 是否开启Debug\nDEBUG = True\n\n# 允许访问的主机ip，可以用通配符*\nALLOWED_HOSTS = []\n\n# Application definition\n# 用来注册App 前6个是django自带的应用\nINSTALLED_APPS = [\n   'django.contrib.admin',\n   'django.contrib.auth',\n   'django.contrib.contenttypes',\n   'django.contrib.sessions',\n   'django.contrib.messages’,\n   'django.contrib.staticfiles’,\n]\n# 中间件 ,需要加载的中间件。比如在请求前和响应后根据规则去执行某些代码的方法\nMIDDLEWARE = [\n   'django.middleware.security.SecurityMiddleware',\n   'django.contrib.sessions.middleware.SessionMiddleware',\n   'django.middleware.common.CommonMiddleware',\n   'django.middleware.csrf.CsrfViewMiddleware',\n   'django.contrib.auth.middleware.AuthenticationMiddleware',\n   'django.contrib.messages.middleware.MessageMiddleware',\n   'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\n# 指定URL列表文件 父级URL配置\nROOT_URLCONF = 'djangoDemo.urls’\n\n# 加载网页模板路径\nTEMPLATES = [\n   {\n       'BACKEND': 'django.template.backends.django.DjangoTemplates',\n       'DIRS': [],\n       'APP_DIRS': True,\n       'OPTIONS': {\n           'context_processors': [\n               'django.template.context_processors.debug',\n               'django.template.context_processors.request',\n               'django.contrib.auth.context_processors.auth',\n               'django.contrib.messages.context_processors.messages',\n           ],\n       },\n   },\n]\n\n# WSGI的配置文件路径\nWSGI_APPLICATION = 'djangoDemo.wsgi.application'\n\n# 数据库配置 默认的数据库为sqlite\nDATABASES = {\n   'default': {\n       'ENGINE': 'django.db.backends.sqlite3',\n       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n   }\n}\n\n\n# 相关密码验证\nAUTH_PASSWORD_VALIDATORS = [\n   {\n       'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n   },\n   {\n       'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n   },\n   {\n       'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n   },\n  {\n       'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n   },\n]\n\n\n# 语言设置 默认英语， 中文是zh-hans\nLANGUAGE_CODE = 'en-us'\n\n# 时区设置，中国的是：Asia/Shanghai\nTIME_ZONE = 'UTC'\n\n# i18n字符集是否支持\nUSE_I18N = True\n\nUSE_L10N = True\n\n# 是否使用timezone\n# 保证存储到数据库中的是 UTC 时间；\n# 在函数之间传递时间参数时，确保时间已经转换成 UTC 时间；\nUSE_TZ = True\n\n# 静态文件路径\nSTATIC_URL = '/static/'\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("h4",{attrs:{id:"创建模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建模块"}},[n._v("#")]),n._v(" 创建模块")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("创建一个名为app_demo的应用\n   django-admin startapp app_demo\n\n目录\n├── app_demo\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── djangoDemo\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[e("h4",{attrs:{id:"app-demo目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#app-demo目录结构"}},[n._v("#")]),n._v(" app_demo目录结构")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("app_demo目录结构\n\nadmin:对应应用后台管理配置文件\n\napps:对应应用的配置文件\n\nmodels:数据模块，用于设计数据库等\n\ntests:编写测试脚本\n\nviews：视图层，直接和浏览器进行交互\n\n每次新建一个App我们需要将其在settings.py文件中的INSTALLED_APPS里进行注册，这样程序才能够找到这个服务\n\nINSTALLED_APPS = [\n   'django.contrib.admin',\n   'django.contrib.auth',\n   'django.contrib.contenttypes',\n   'django.contrib.sessions',\n   'django.contrib.messages',\n   'django.contrib.staticfiles',\n   'app_demo', # 注册新创建的应用app\n]\n\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[e("h4",{attrs:{id:"打开app-demo目录下的view-py，编写视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打开app-demo目录下的view-py，编写视图"}},[n._v("#")]),n._v(" 打开app_demo目录下的view.py，编写视图")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef hello(request):\n   return HttpResponse('Hello World')\n\n")])])]),e("ol",{attrs:{start:"7"}},[e("li",[e("h4",{attrs:{id:"打开djiangodemo的urls-py"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打开djiangodemo的urls-py"}},[n._v("#")]),n._v(" 打开DjiangoDemo的urls.py")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("映射URL\n主页的URL，它是用户用来访问项目的基础URL\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [    \n   path('admin/', admin.site.urls),    \n   path('', include('app_demo.urls')),\n]\n")])])]),e("ol",{attrs:{start:"8"}},[e("li",[e("h4",{attrs:{id:"在文件夹app-demo中创建另一个urls-py文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在文件夹app-demo中创建另一个urls-py文件"}},[n._v("#")]),n._v(" 在文件夹app_demo中创建另一个urls.py文件")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("from django.urls import path\nfrom . import views\n\napp_name='app_demo’\nurlpatterns = [\n   path('hello', views.hello, name=‘hello'),\n]\n")])])]),e("ol",{attrs:{start:"9"}},[e("li",[e("h4",{attrs:{id:"执行如下命令来启动项目-大概一个项目就跑起来了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行如下命令来启动项目-大概一个项目就跑起来了"}},[n._v("#")]),n._v(" 执行如下命令来启动项目,大概一个项目就跑起来了")])])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("python3 manage.py runserver  8000 \n")])])]),e("h3",{attrs:{id:"下面是一些正式开发需要注意的！"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下面是一些正式开发需要注意的！"}},[n._v("#")]),n._v(" 下面是一些正式开发需要注意的！")]),n._v(" "),e("h4",{attrs:{id:"连接数据库，定义模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接数据库，定义模型"}},[n._v("#")]),n._v(" 连接数据库，定义模型")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("1.settings.py的MySQL连接信息，如下\n ``` \n  import pymysql\n  pymysql.install_as_MySQLdb()\n\n  DATABASES = {\n      'default': {\n          ‘ENGINE’: ‘django.db.backends.mysql’,  # 数据库引擎\n          ‘NAME’: ‘test’,                          #  数据库名，事先要创建\n          ‘USER’: ‘test’,\t\t      #  用户名\n          ‘PASSWORD’: ‘test123’,           #   密码\n          ‘HOST’:‘localhost’,                   #   主机\n          ‘PORT’:‘3306’,\t                      #   数据库端口\n      }\n  }\n\n ```\n2.定义模型 model.py\n ```\nfrom django.db import models\n\nclass Musician(models.Model):\n      first_name = models.CharField(max_length=50)\n      last_name = models.CharField(max_length=50)\n      instrument = models.CharField(max_length=100)\n\nclass Album(models.Model):\n      artist = models.ForeignKey(Musician, on_delete=models.CASCADE)\n      name = models.CharField(max_length=100)\n      release_date = models.DateField()\n      num_stars = models.IntegerField()\n\npython3 manage.py makemigrations app_demo    # 生成迁移文件\npython3 manage.py migrate   # 执行迁移文件\n\n ``` \n")])])]),e("h4",{attrs:{id:"restful设计方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful设计方法"}},[n._v("#")]),n._v(" RESTful设计方法")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('1.域名\n 应该尽量将API部署在专用域名之下。\n   https://api.example.com\n   如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\n   https://example.org/api/\n\n2.版本（Versioning）\n应该将API的版本号放入URL。\nhttp://www.example.com/api/1.0/foo\nhttp://www.example.com/api/1.1/foo\nhttp://www.example.com/api/2.0/foo\n\n另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。\n因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URL。版本号可以在HTTP请求头信息的Accept字\n段中进行区分（参见Versioning REST Services）：\nAccept: vnd.example-com.foo+json; version=1.0\n\nAccept: vnd.example-com.foo+json; version=1.1\n\nAccept: vnd.example-com.foo+json; version=2.0\n\n3.路径\n路径又称"终点"（endpoint），表示API的具体网址，每个网址代表一种资源（resource）\n\n(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。\n举例来说，以下是不好的例子:\n  /getProducts \n  /listOrders \n  /retreiveClientByOrder?orderId=1\n\n对于一个简洁结构，你应该始终用名词。 此外，利用的HTTP方法可以分离网址中的资源名称的操作。\n\n  GET /products ：将返回所有产品清单 \n  POST /products ：将产品新建到集合 \n  GET /products/4 ：将获取产品 4 \n  PATCH（或）PUT /products/4 ：将更新产品 4\n\n(2) API中的名词应该使用复数。无论子资源或者所有资源。\n举例来说，获取产品的API可以这样定义\n  获取单个产品：http://127.0.0.1:8080/AppName/rest/products/1 \n  获取所有产品: http://127.0.0.1:8080/AppName/rest/products\n')])])]),e("ol",{attrs:{start:"4"}},[e("li",[n._v('HTTP动词\n路径又称"终点"（endpoint），表示API的具体网址，每个网址代表一种资源（resource）')])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。\n举例来说，以下是不好的例子:\n  /getProducts \n  /listOrders \n  /retreiveClientByOrder?orderId=1\n\n对于一个简洁结构，你应该始终用名词。 此外，利用的HTTP方法可以分离网址中的资源名称的操作。\n\n  GET /products ：将返回所有产品清单 \n  POST /products ：将产品新建到集合 \n  GET /products/4 ：将获取产品 4 \n  PATCH（或）PUT /products/4 ：将更新产品 4\n\n(2) API中的名词应该使用复数。无论子资源或者所有资源。\n举例来说，获取产品的API可以这样定义\n  获取单个产品：http://127.0.0.1:8080/AppName/rest/products/1 \n  获取所有产品: http://127.0.0.1:8080/AppName/rest/products\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[e("p",[n._v("过滤信息（Filtering）\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。\n下面是一些常见的参数。\n?limit=10：指定返回记录的数量\n?offset=10：指定返回记录的开始位置。\n?page=2&per_page=100：指定第几页，以及每页的记录数。\n?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n?animal_type_id=1：指定筛选条件")])]),n._v(" "),e("li",[e("p",[n._v("状态码（Status Codes）\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）\n200 OK - [GET]：服务器成功返回用户请求的数据\n201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n202 Accepted - ["),e("em",[n._v("]：表示一个请求已经进入后台排队（异步任务）\n204 NO CONTENT - [DELETE]：用户删除数据成功。\n400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作\n401 Unauthorized - [")]),n._v("]：表示用户没有权限（令牌、用户名、密码错误）。\n403 Forbidden - ["),e("em",[n._v("] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n404 NOT FOUND - [")]),n._v("]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。")])]),n._v(" "),e("li",[e("p",[n._v('错误处理（Error handling）\n如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信\n息中将error作为键名，出错信息作为键值即可。\n{\nerror: "Invalid API key“\n}')])]),n._v(" "),e("li",[e("p",[n._v("返回结果\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\nGET /collection：返回资源对象的列表（数组）\nGET /collection/resource：返回单个资源对象\nPOST /collection：返回新生成的资源对象\nPUT /collection/resource：返回完整的资源对象\nPATCH /collection/resource：返回完整的资源对象\nDELETE /collection/resource：返回一个空文档")])]),n._v(" "),e("li",[e("p",[n._v('超媒体（Hypermedia API）\nRESTful API最好做到Hypermedia（即返回结果中提供链接，连向其他API方法），使得用户不查文档，也知道\n下一步应该做什么。比如，Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。\n{\n"current_user_url": "https://api.github.com/user",\n"authorizations_url": "https://api.github.com/authorizations",\n// ...\n}')]),n._v(" "),e("p",[n._v('从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。\n{\n"message": "Requires authentication",\n"documentation_url": "https://developer.github.com/v3"\n}\n上面代码表示，服务器给出了提示信息，以及文档的网址。')])]),n._v(" "),e("li",[e("p",[n._v("其他\n服务器返回的数据格式，应该尽量使用JSON，避免使用XML。")])])]),n._v(" "),e("h3",{attrs:{id:"django-rest-framework-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#django-rest-framework-2"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://www.django-rest-framework.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Django REST framework"),e("OutboundLink")],1)]),n._v(" "),e("h4",{attrs:{id:"fbv-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fbv-模式"}},[n._v("#")]),n._v(" FBV 模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```\n  #url\n  from django.contrib import admin\n  from django.urls import path\n  from app01 import views\n   \n  urlpatterns = [\n      path('admin/', admin.site.urls),\n      # 基于函数的视图\n      path('user/',views.user)\n  ]\n  \n  # view\n  from django.shortcuts import render,HttpResponse\n  import json\n   \n  # FBV 模式\n  def user(request):\n      '''\n      如果有不同的方法 则要进行不同的判断\n      '''\n      if request.method == \"GET\":\n          return HttpResponse(\"GET\")\n   \n      if request.method == \"POST\":\n          return HttpResponse(\"POST\")\n```\n")])])]),e("h4",{attrs:{id:"cbv-模式-一般开发用这个模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cbv-模式-一般开发用这个模式"}},[n._v("#")]),n._v(" CBV 模式(一般开发用这个模式)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("  # url\n  from django.contrib import admin\n  from django.urls import path\n  from app01 import views\n   \n  urlpatterns = [\n      path('admin/', admin.site.urls),\n       \n      # CBV模式\n      path('people',views.PeopleView.as_view())  # 后面的as_view()要记得写上\n  ]\n   \n  # view\n  '''\n  CBV模式需要继承View\n  当请求是get时候 自动执行get方法 \n  当请求是post的时候 自动执行post方法\n  '''\n   \n  from django.views import View\n   \n  # 所有CBV的都必须继承View\n  class PeopleView(View):  # 一般喜欢在后面加个View\n   \n      def get(self,request,*args,**kwargs):\n          return HttpResponse(\"GET\")\n   \n      def post(self,request,*args,**kwargs):\n          return HttpResponse(\"POST\")\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);